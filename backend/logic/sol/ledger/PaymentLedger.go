// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ledger

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SolMetaData contains all meta data concerning the Sol contract.
var SolMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"stateMutability\":\"nonpayable\",\"inputs\":[]},{\"type\":\"event\",\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"newOwner\",\"indexed\":true}],\"name\":\"OwnershipTransferred\"},{\"anonymous\":false,\"inputs\":[{\"name\":\"nonce\",\"internalType\":\"uint256\",\"indexed\":true,\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"requester\",\"indexed\":true,\"type\":\"string\"},{\"type\":\"string\",\"indexed\":true,\"name\":\"token\",\"internalType\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false},{\"type\":\"string\",\"indexed\":false,\"name\":\"txid\",\"internalType\":\"string\"},{\"name\":\"vault\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"internalType\":\"uint256\",\"type\":\"uint256\",\"name\":\"timestamp\",\"indexed\":false},{\"name\":\"requestHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"name\":\"PaymentConfirmed\",\"type\":\"event\"},{\"type\":\"event\",\"anonymous\":false,\"inputs\":[{\"type\":\"uint256\",\"name\":\"nonce\",\"internalType\":\"uint256\",\"indexed\":true},{\"type\":\"string\",\"name\":\"requester\",\"internalType\":\"string\",\"indexed\":true},{\"internalType\":\"string\",\"indexed\":true,\"name\":\"token\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"type\":\"uint256\",\"name\":\"amount\",\"indexed\":false},{\"name\":\"txid\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false},{\"indexed\":false,\"name\":\"vault\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"timestamp\",\"internalType\":\"uint256\",\"type\":\"uint256\",\"indexed\":false},{\"internalType\":\"bytes32\",\"type\":\"bytes32\",\"name\":\"requestHash\",\"indexed\":false}],\"name\":\"PaymentRequestAdd\"},{\"type\":\"event\",\"name\":\"PaymentRequestCancel\",\"anonymous\":false,\"inputs\":[{\"type\":\"uint256\",\"name\":\"nonce\",\"internalType\":\"uint256\",\"indexed\":true},{\"type\":\"string\",\"indexed\":true,\"name\":\"txid\",\"internalType\":\"string\"},{\"type\":\"string\",\"name\":\"requester\",\"internalType\":\"string\",\"indexed\":true},{\"indexed\":false,\"name\":\"requestHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"requester\",\"internalType\":\"string\",\"type\":\"string\",\"indexed\":true},{\"indexed\":true,\"type\":\"string\",\"internalType\":\"string\",\"name\":\"token\"},{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"amount\",\"indexed\":false},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"},{\"internalType\":\"string\",\"indexed\":false,\"type\":\"string\",\"name\":\"vault\"},{\"internalType\":\"uint256\",\"type\":\"uint256\",\"name\":\"timestamp\",\"indexed\":false},{\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestHash\"}],\"name\":\"WithdrawConfirmed\",\"type\":\"event\",\"anonymous\":false},{\"type\":\"event\",\"inputs\":[{\"name\":\"nonce\",\"internalType\":\"uint256\",\"indexed\":true,\"type\":\"uint256\"},{\"indexed\":true,\"type\":\"string\",\"internalType\":\"string\",\"name\":\"requester\"},{\"name\":\"token\",\"indexed\":true,\"type\":\"string\",\"internalType\":\"string\"},{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"amount\",\"indexed\":false},{\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"name\":\"txid\"},{\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"name\":\"vault\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"indexed\":false,\"type\":\"bytes32\",\"name\":\"requestHash\"}],\"name\":\"WithdrawRequestAdd\",\"anonymous\":false},{\"type\":\"event\",\"name\":\"WithdrawRequestCancel\",\"inputs\":[{\"internalType\":\"uint256\",\"type\":\"uint256\",\"name\":\"nonce\",\"indexed\":true},{\"type\":\"string\",\"internalType\":\"string\",\"indexed\":true,\"name\":\"txid\"},{\"type\":\"string\",\"name\":\"requester\",\"internalType\":\"string\",\"indexed\":true},{\"name\":\"requestHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false}],\"anonymous\":false},{\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"internalType\":\"address\",\"type\":\"address\"}],\"type\":\"function\",\"stateMutability\":\"view\"},{\"name\":\"paymentRequestNonce\",\"outputs\":[{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"\"}],\"type\":\"function\",\"inputs\":[{\"type\":\"bytes32\",\"name\":\"\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"inputs\":[{\"type\":\"string\",\"internalType\":\"string\",\"name\":\"\"}],\"stateMutability\":\"view\",\"name\":\"paymentRequestTxid\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"paymentRequests\",\"stateMutability\":\"view\",\"type\":\"function\",\"outputs\":[{\"internalType\":\"string\",\"type\":\"string\",\"name\":\"requester\"},{\"type\":\"string\",\"name\":\"token\",\"internalType\":\"string\"},{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"amount\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vault\",\"type\":\"string\"},{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"nonce\"},{\"internalType\":\"uint256\",\"type\":\"uint256\",\"name\":\"timestamp\"},{\"type\":\"uint8\",\"name\":\"status\",\"internalType\":\"enumPaymentLedger.RequestStatus\"}],\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"outputs\":[{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"\"}],\"name\":\"vaultInfoNonce\",\"type\":\"function\",\"stateMutability\":\"view\",\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"name\":\"vaultTokenBalance\",\"inputs\":[{\"type\":\"string\",\"internalType\":\"string\",\"name\":\"\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"outputs\":[{\"internalType\":\"uint256\",\"type\":\"uint256\",\"name\":\"\"}],\"type\":\"function\"},{\"name\":\"vaults\",\"inputs\":[{\"internalType\":\"uint256\",\"type\":\"uint256\",\"name\":\"\"}],\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"internalType\":\"string\",\"type\":\"string\",\"name\":\"vaultAddress\"},{\"name\":\"status\",\"type\":\"uint8\",\"internalType\":\"enumPaymentLedger.VaultStatus\"}]},{\"type\":\"function\",\"inputs\":[{\"internalType\":\"bytes32\",\"type\":\"bytes32\",\"name\":\"\"}],\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"withdrawRequestNonce\",\"stateMutability\":\"view\"},{\"stateMutability\":\"view\",\"inputs\":[{\"type\":\"string\",\"name\":\"\",\"internalType\":\"string\"}],\"type\":\"function\",\"name\":\"withdrawRequestTxid\",\"outputs\":[{\"name\":\"\",\"internalType\":\"bytes32\",\"type\":\"bytes32\"}]},{\"name\":\"withdrawRequests\",\"inputs\":[{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"\"}],\"outputs\":[{\"name\":\"requester\",\"internalType\":\"string\",\"type\":\"string\"},{\"name\":\"token\",\"internalType\":\"string\",\"type\":\"string\"},{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"amount\"},{\"type\":\"string\",\"name\":\"txid\",\"internalType\":\"string\"},{\"type\":\"string\",\"name\":\"vault\",\"internalType\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"type\":\"uint8\",\"internalType\":\"enumPaymentLedger.RequestStatus\",\"name\":\"status\"}],\"type\":\"function\",\"stateMutability\":\"view\"},{\"inputs\":[{\"type\":\"string\",\"name\":\"tokenAddress_\",\"internalType\":\"string\"},{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"amount_\"},{\"internalType\":\"string\",\"name\":\"txid_\",\"type\":\"string\"},{\"type\":\"string\",\"name\":\"requester_\",\"internalType\":\"string\"}],\"name\":\"AddPaymentRequest\",\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"outputs\":[{\"internalType\":\"bool\",\"type\":\"bool\",\"name\":\"\"}]},{\"outputs\":[{\"type\":\"bool\",\"internalType\":\"bool\",\"name\":\"\"}],\"type\":\"function\",\"name\":\"cancelPaymentRequest\",\"inputs\":[{\"internalType\":\"string\",\"name\":\"txid_\",\"type\":\"string\"},{\"internalType\":\"string\",\"type\":\"string\",\"name\":\"requester_\"}],\"stateMutability\":\"nonpayable\"},{\"inputs\":[{\"name\":\"txid_\",\"internalType\":\"string\",\"type\":\"string\"},{\"internalType\":\"string\",\"type\":\"string\",\"name\":\"requester_\"}],\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[{\"name\":\"\",\"internalType\":\"bool\",\"type\":\"bool\"}],\"name\":\"confirmPaymentRequest\"},{\"outputs\":[{\"type\":\"bool\",\"internalType\":\"bool\",\"name\":\"\"}],\"name\":\"AddWithdrawRequest\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"tokenAddress_\",\"type\":\"string\",\"internalType\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"type\":\"string\",\"name\":\"txid_\",\"internalType\":\"string\"},{\"internalType\":\"string\",\"type\":\"string\",\"name\":\"vault_\"},{\"internalType\":\"string\",\"type\":\"string\",\"name\":\"requester_\"}],\"type\":\"function\"},{\"name\":\"cancelWithdrawRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"internalType\":\"string\",\"type\":\"string\",\"name\":\"txid_\"},{\"name\":\"requester_\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"stateMutability\":\"nonpayable\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\",\"internalType\":\"bool\"}],\"inputs\":[{\"type\":\"string\",\"name\":\"txid_\",\"internalType\":\"string\"},{\"internalType\":\"string\",\"type\":\"string\",\"name\":\"requester_\"}],\"type\":\"function\",\"name\":\"confirmWithdrawRequest\"},{\"name\":\"resetPaymentVaults\",\"outputs\":[],\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"type\":\"string[]\",\"internalType\":\"string[]\",\"name\":\"vaultAddresses_\"}]}]",
	Bin: "",
}

// SolABI is the input ABI used to generate the binding from.
// Deprecated: Use SolMetaData.ABI instead.
var SolABI = SolMetaData.ABI

// SolBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SolMetaData.Bin instead.
var SolBin = SolMetaData.Bin

// DeploySol deploys a new Ethereum contract, binding an instance of Sol to it.
func DeploySol(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Sol, error) {
	parsed, err := SolMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SolBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Sol{SolCaller: SolCaller{contract: contract}, SolTransactor: SolTransactor{contract: contract}, SolFilterer: SolFilterer{contract: contract}}, nil
}

// Sol is an auto generated Go binding around an Ethereum contract.
type Sol struct {
	SolCaller     // Read-only binding to the contract
	SolTransactor // Write-only binding to the contract
	SolFilterer   // Log filterer for contract events
}

// SolCaller is an auto generated read-only Go binding around an Ethereum contract.
type SolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SolSession struct {
	Contract     *Sol              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SolCallerSession struct {
	Contract *SolCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SolTransactorSession struct {
	Contract     *SolTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SolRaw is an auto generated low-level Go binding around an Ethereum contract.
type SolRaw struct {
	Contract *Sol // Generic contract binding to access the raw methods on
}

// SolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SolCallerRaw struct {
	Contract *SolCaller // Generic read-only contract binding to access the raw methods on
}

// SolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SolTransactorRaw struct {
	Contract *SolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSol creates a new instance of Sol, bound to a specific deployed contract.
func NewSol(address common.Address, backend bind.ContractBackend) (*Sol, error) {
	contract, err := bindSol(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Sol{SolCaller: SolCaller{contract: contract}, SolTransactor: SolTransactor{contract: contract}, SolFilterer: SolFilterer{contract: contract}}, nil
}

// NewSolCaller creates a new read-only instance of Sol, bound to a specific deployed contract.
func NewSolCaller(address common.Address, caller bind.ContractCaller) (*SolCaller, error) {
	contract, err := bindSol(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SolCaller{contract: contract}, nil
}

// NewSolTransactor creates a new write-only instance of Sol, bound to a specific deployed contract.
func NewSolTransactor(address common.Address, transactor bind.ContractTransactor) (*SolTransactor, error) {
	contract, err := bindSol(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SolTransactor{contract: contract}, nil
}

// NewSolFilterer creates a new log filterer instance of Sol, bound to a specific deployed contract.
func NewSolFilterer(address common.Address, filterer bind.ContractFilterer) (*SolFilterer, error) {
	contract, err := bindSol(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SolFilterer{contract: contract}, nil
}

// bindSol binds a generic wrapper to an already deployed contract.
func bindSol(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sol *SolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sol.Contract.SolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sol *SolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sol.Contract.SolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sol *SolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sol.Contract.SolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sol *SolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sol.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sol *SolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sol.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sol *SolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sol.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sol *SolCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Sol.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sol *SolSession) Owner() (common.Address, error) {
	return _Sol.Contract.Owner(&_Sol.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sol *SolCallerSession) Owner() (common.Address, error) {
	return _Sol.Contract.Owner(&_Sol.CallOpts)
}

// PaymentRequestNonce is a free data retrieval call binding the contract method 0xe8be1a43.
//
// Solidity: function paymentRequestNonce(bytes32 ) view returns(uint256)
func (_Sol *SolCaller) PaymentRequestNonce(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Sol.contract.Call(opts, &out, "paymentRequestNonce", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PaymentRequestNonce is a free data retrieval call binding the contract method 0xe8be1a43.
//
// Solidity: function paymentRequestNonce(bytes32 ) view returns(uint256)
func (_Sol *SolSession) PaymentRequestNonce(arg0 [32]byte) (*big.Int, error) {
	return _Sol.Contract.PaymentRequestNonce(&_Sol.CallOpts, arg0)
}

// PaymentRequestNonce is a free data retrieval call binding the contract method 0xe8be1a43.
//
// Solidity: function paymentRequestNonce(bytes32 ) view returns(uint256)
func (_Sol *SolCallerSession) PaymentRequestNonce(arg0 [32]byte) (*big.Int, error) {
	return _Sol.Contract.PaymentRequestNonce(&_Sol.CallOpts, arg0)
}

// PaymentRequestTxid is a free data retrieval call binding the contract method 0x2b26229c.
//
// Solidity: function paymentRequestTxid(string ) view returns(bytes32)
func (_Sol *SolCaller) PaymentRequestTxid(opts *bind.CallOpts, arg0 string) ([32]byte, error) {
	var out []interface{}
	err := _Sol.contract.Call(opts, &out, "paymentRequestTxid", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PaymentRequestTxid is a free data retrieval call binding the contract method 0x2b26229c.
//
// Solidity: function paymentRequestTxid(string ) view returns(bytes32)
func (_Sol *SolSession) PaymentRequestTxid(arg0 string) ([32]byte, error) {
	return _Sol.Contract.PaymentRequestTxid(&_Sol.CallOpts, arg0)
}

// PaymentRequestTxid is a free data retrieval call binding the contract method 0x2b26229c.
//
// Solidity: function paymentRequestTxid(string ) view returns(bytes32)
func (_Sol *SolCallerSession) PaymentRequestTxid(arg0 string) ([32]byte, error) {
	return _Sol.Contract.PaymentRequestTxid(&_Sol.CallOpts, arg0)
}

// PaymentRequests is a free data retrieval call binding the contract method 0xd4358800.
//
// Solidity: function paymentRequests(uint256 ) view returns(string requester, string token, uint256 amount, string txid, string vault, uint256 nonce, uint256 timestamp, uint8 status)
func (_Sol *SolCaller) PaymentRequests(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Requester string
	Token     string
	Amount    *big.Int
	Txid      string
	Vault     string
	Nonce     *big.Int
	Timestamp *big.Int
	Status    uint8
}, error) {
	var out []interface{}
	err := _Sol.contract.Call(opts, &out, "paymentRequests", arg0)

	outstruct := new(struct {
		Requester string
		Token     string
		Amount    *big.Int
		Txid      string
		Vault     string
		Nonce     *big.Int
		Timestamp *big.Int
		Status    uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Requester = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Token = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Amount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Txid = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.Vault = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.Nonce = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Timestamp = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.Status = *abi.ConvertType(out[7], new(uint8)).(*uint8)

	return *outstruct, err

}

// PaymentRequests is a free data retrieval call binding the contract method 0xd4358800.
//
// Solidity: function paymentRequests(uint256 ) view returns(string requester, string token, uint256 amount, string txid, string vault, uint256 nonce, uint256 timestamp, uint8 status)
func (_Sol *SolSession) PaymentRequests(arg0 *big.Int) (struct {
	Requester string
	Token     string
	Amount    *big.Int
	Txid      string
	Vault     string
	Nonce     *big.Int
	Timestamp *big.Int
	Status    uint8
}, error) {
	return _Sol.Contract.PaymentRequests(&_Sol.CallOpts, arg0)
}

// PaymentRequests is a free data retrieval call binding the contract method 0xd4358800.
//
// Solidity: function paymentRequests(uint256 ) view returns(string requester, string token, uint256 amount, string txid, string vault, uint256 nonce, uint256 timestamp, uint8 status)
func (_Sol *SolCallerSession) PaymentRequests(arg0 *big.Int) (struct {
	Requester string
	Token     string
	Amount    *big.Int
	Txid      string
	Vault     string
	Nonce     *big.Int
	Timestamp *big.Int
	Status    uint8
}, error) {
	return _Sol.Contract.PaymentRequests(&_Sol.CallOpts, arg0)
}

// VaultInfoNonce is a free data retrieval call binding the contract method 0xee9e50c0.
//
// Solidity: function vaultInfoNonce(string ) view returns(uint256)
func (_Sol *SolCaller) VaultInfoNonce(opts *bind.CallOpts, arg0 string) (*big.Int, error) {
	var out []interface{}
	err := _Sol.contract.Call(opts, &out, "vaultInfoNonce", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VaultInfoNonce is a free data retrieval call binding the contract method 0xee9e50c0.
//
// Solidity: function vaultInfoNonce(string ) view returns(uint256)
func (_Sol *SolSession) VaultInfoNonce(arg0 string) (*big.Int, error) {
	return _Sol.Contract.VaultInfoNonce(&_Sol.CallOpts, arg0)
}

// VaultInfoNonce is a free data retrieval call binding the contract method 0xee9e50c0.
//
// Solidity: function vaultInfoNonce(string ) view returns(uint256)
func (_Sol *SolCallerSession) VaultInfoNonce(arg0 string) (*big.Int, error) {
	return _Sol.Contract.VaultInfoNonce(&_Sol.CallOpts, arg0)
}

// VaultTokenBalance is a free data retrieval call binding the contract method 0xe4828e01.
//
// Solidity: function vaultTokenBalance(string , string ) view returns(uint256)
func (_Sol *SolCaller) VaultTokenBalance(opts *bind.CallOpts, arg0 string, arg1 string) (*big.Int, error) {
	var out []interface{}
	err := _Sol.contract.Call(opts, &out, "vaultTokenBalance", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VaultTokenBalance is a free data retrieval call binding the contract method 0xe4828e01.
//
// Solidity: function vaultTokenBalance(string , string ) view returns(uint256)
func (_Sol *SolSession) VaultTokenBalance(arg0 string, arg1 string) (*big.Int, error) {
	return _Sol.Contract.VaultTokenBalance(&_Sol.CallOpts, arg0, arg1)
}

// VaultTokenBalance is a free data retrieval call binding the contract method 0xe4828e01.
//
// Solidity: function vaultTokenBalance(string , string ) view returns(uint256)
func (_Sol *SolCallerSession) VaultTokenBalance(arg0 string, arg1 string) (*big.Int, error) {
	return _Sol.Contract.VaultTokenBalance(&_Sol.CallOpts, arg0, arg1)
}

// Vaults is a free data retrieval call binding the contract method 0x8c64ea4a.
//
// Solidity: function vaults(uint256 ) view returns(string vaultAddress, uint8 status)
func (_Sol *SolCaller) Vaults(opts *bind.CallOpts, arg0 *big.Int) (struct {
	VaultAddress string
	Status       uint8
}, error) {
	var out []interface{}
	err := _Sol.contract.Call(opts, &out, "vaults", arg0)

	outstruct := new(struct {
		VaultAddress string
		Status       uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.VaultAddress = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Status = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// Vaults is a free data retrieval call binding the contract method 0x8c64ea4a.
//
// Solidity: function vaults(uint256 ) view returns(string vaultAddress, uint8 status)
func (_Sol *SolSession) Vaults(arg0 *big.Int) (struct {
	VaultAddress string
	Status       uint8
}, error) {
	return _Sol.Contract.Vaults(&_Sol.CallOpts, arg0)
}

// Vaults is a free data retrieval call binding the contract method 0x8c64ea4a.
//
// Solidity: function vaults(uint256 ) view returns(string vaultAddress, uint8 status)
func (_Sol *SolCallerSession) Vaults(arg0 *big.Int) (struct {
	VaultAddress string
	Status       uint8
}, error) {
	return _Sol.Contract.Vaults(&_Sol.CallOpts, arg0)
}

// WithdrawRequestNonce is a free data retrieval call binding the contract method 0x6cf175a3.
//
// Solidity: function withdrawRequestNonce(bytes32 ) view returns(uint256)
func (_Sol *SolCaller) WithdrawRequestNonce(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Sol.contract.Call(opts, &out, "withdrawRequestNonce", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawRequestNonce is a free data retrieval call binding the contract method 0x6cf175a3.
//
// Solidity: function withdrawRequestNonce(bytes32 ) view returns(uint256)
func (_Sol *SolSession) WithdrawRequestNonce(arg0 [32]byte) (*big.Int, error) {
	return _Sol.Contract.WithdrawRequestNonce(&_Sol.CallOpts, arg0)
}

// WithdrawRequestNonce is a free data retrieval call binding the contract method 0x6cf175a3.
//
// Solidity: function withdrawRequestNonce(bytes32 ) view returns(uint256)
func (_Sol *SolCallerSession) WithdrawRequestNonce(arg0 [32]byte) (*big.Int, error) {
	return _Sol.Contract.WithdrawRequestNonce(&_Sol.CallOpts, arg0)
}

// WithdrawRequestTxid is a free data retrieval call binding the contract method 0x25d5b898.
//
// Solidity: function withdrawRequestTxid(string ) view returns(bytes32)
func (_Sol *SolCaller) WithdrawRequestTxid(opts *bind.CallOpts, arg0 string) ([32]byte, error) {
	var out []interface{}
	err := _Sol.contract.Call(opts, &out, "withdrawRequestTxid", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WithdrawRequestTxid is a free data retrieval call binding the contract method 0x25d5b898.
//
// Solidity: function withdrawRequestTxid(string ) view returns(bytes32)
func (_Sol *SolSession) WithdrawRequestTxid(arg0 string) ([32]byte, error) {
	return _Sol.Contract.WithdrawRequestTxid(&_Sol.CallOpts, arg0)
}

// WithdrawRequestTxid is a free data retrieval call binding the contract method 0x25d5b898.
//
// Solidity: function withdrawRequestTxid(string ) view returns(bytes32)
func (_Sol *SolCallerSession) WithdrawRequestTxid(arg0 string) ([32]byte, error) {
	return _Sol.Contract.WithdrawRequestTxid(&_Sol.CallOpts, arg0)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x992a7dfb.
//
// Solidity: function withdrawRequests(uint256 ) view returns(string requester, string token, uint256 amount, string txid, string vault, uint256 nonce, uint256 timestamp, uint8 status)
func (_Sol *SolCaller) WithdrawRequests(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Requester string
	Token     string
	Amount    *big.Int
	Txid      string
	Vault     string
	Nonce     *big.Int
	Timestamp *big.Int
	Status    uint8
}, error) {
	var out []interface{}
	err := _Sol.contract.Call(opts, &out, "withdrawRequests", arg0)

	outstruct := new(struct {
		Requester string
		Token     string
		Amount    *big.Int
		Txid      string
		Vault     string
		Nonce     *big.Int
		Timestamp *big.Int
		Status    uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Requester = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Token = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Amount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Txid = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.Vault = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.Nonce = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Timestamp = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.Status = *abi.ConvertType(out[7], new(uint8)).(*uint8)

	return *outstruct, err

}

// WithdrawRequests is a free data retrieval call binding the contract method 0x992a7dfb.
//
// Solidity: function withdrawRequests(uint256 ) view returns(string requester, string token, uint256 amount, string txid, string vault, uint256 nonce, uint256 timestamp, uint8 status)
func (_Sol *SolSession) WithdrawRequests(arg0 *big.Int) (struct {
	Requester string
	Token     string
	Amount    *big.Int
	Txid      string
	Vault     string
	Nonce     *big.Int
	Timestamp *big.Int
	Status    uint8
}, error) {
	return _Sol.Contract.WithdrawRequests(&_Sol.CallOpts, arg0)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x992a7dfb.
//
// Solidity: function withdrawRequests(uint256 ) view returns(string requester, string token, uint256 amount, string txid, string vault, uint256 nonce, uint256 timestamp, uint8 status)
func (_Sol *SolCallerSession) WithdrawRequests(arg0 *big.Int) (struct {
	Requester string
	Token     string
	Amount    *big.Int
	Txid      string
	Vault     string
	Nonce     *big.Int
	Timestamp *big.Int
	Status    uint8
}, error) {
	return _Sol.Contract.WithdrawRequests(&_Sol.CallOpts, arg0)
}

// AddPaymentRequest is a paid mutator transaction binding the contract method 0x7b2f160a.
//
// Solidity: function AddPaymentRequest(string tokenAddress_, uint256 amount_, string txid_, string requester_) returns(bool)
func (_Sol *SolTransactor) AddPaymentRequest(opts *bind.TransactOpts, tokenAddress_ string, amount_ *big.Int, txid_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.contract.Transact(opts, "AddPaymentRequest", tokenAddress_, amount_, txid_, requester_)
}

// AddPaymentRequest is a paid mutator transaction binding the contract method 0x7b2f160a.
//
// Solidity: function AddPaymentRequest(string tokenAddress_, uint256 amount_, string txid_, string requester_) returns(bool)
func (_Sol *SolSession) AddPaymentRequest(tokenAddress_ string, amount_ *big.Int, txid_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.Contract.AddPaymentRequest(&_Sol.TransactOpts, tokenAddress_, amount_, txid_, requester_)
}

// AddPaymentRequest is a paid mutator transaction binding the contract method 0x7b2f160a.
//
// Solidity: function AddPaymentRequest(string tokenAddress_, uint256 amount_, string txid_, string requester_) returns(bool)
func (_Sol *SolTransactorSession) AddPaymentRequest(tokenAddress_ string, amount_ *big.Int, txid_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.Contract.AddPaymentRequest(&_Sol.TransactOpts, tokenAddress_, amount_, txid_, requester_)
}

// AddWithdrawRequest is a paid mutator transaction binding the contract method 0x51bc29ce.
//
// Solidity: function AddWithdrawRequest(string tokenAddress_, uint256 amount_, string txid_, string vault_, string requester_) returns(bool)
func (_Sol *SolTransactor) AddWithdrawRequest(opts *bind.TransactOpts, tokenAddress_ string, amount_ *big.Int, txid_ string, vault_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.contract.Transact(opts, "AddWithdrawRequest", tokenAddress_, amount_, txid_, vault_, requester_)
}

// AddWithdrawRequest is a paid mutator transaction binding the contract method 0x51bc29ce.
//
// Solidity: function AddWithdrawRequest(string tokenAddress_, uint256 amount_, string txid_, string vault_, string requester_) returns(bool)
func (_Sol *SolSession) AddWithdrawRequest(tokenAddress_ string, amount_ *big.Int, txid_ string, vault_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.Contract.AddWithdrawRequest(&_Sol.TransactOpts, tokenAddress_, amount_, txid_, vault_, requester_)
}

// AddWithdrawRequest is a paid mutator transaction binding the contract method 0x51bc29ce.
//
// Solidity: function AddWithdrawRequest(string tokenAddress_, uint256 amount_, string txid_, string vault_, string requester_) returns(bool)
func (_Sol *SolTransactorSession) AddWithdrawRequest(tokenAddress_ string, amount_ *big.Int, txid_ string, vault_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.Contract.AddWithdrawRequest(&_Sol.TransactOpts, tokenAddress_, amount_, txid_, vault_, requester_)
}

// CancelPaymentRequest is a paid mutator transaction binding the contract method 0xf917c2a8.
//
// Solidity: function cancelPaymentRequest(string txid_, string requester_) returns(bool)
func (_Sol *SolTransactor) CancelPaymentRequest(opts *bind.TransactOpts, txid_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.contract.Transact(opts, "cancelPaymentRequest", txid_, requester_)
}

// CancelPaymentRequest is a paid mutator transaction binding the contract method 0xf917c2a8.
//
// Solidity: function cancelPaymentRequest(string txid_, string requester_) returns(bool)
func (_Sol *SolSession) CancelPaymentRequest(txid_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.Contract.CancelPaymentRequest(&_Sol.TransactOpts, txid_, requester_)
}

// CancelPaymentRequest is a paid mutator transaction binding the contract method 0xf917c2a8.
//
// Solidity: function cancelPaymentRequest(string txid_, string requester_) returns(bool)
func (_Sol *SolTransactorSession) CancelPaymentRequest(txid_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.Contract.CancelPaymentRequest(&_Sol.TransactOpts, txid_, requester_)
}

// CancelWithdrawRequest is a paid mutator transaction binding the contract method 0xf9b2d23b.
//
// Solidity: function cancelWithdrawRequest(string txid_, string requester_) returns(bool)
func (_Sol *SolTransactor) CancelWithdrawRequest(opts *bind.TransactOpts, txid_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.contract.Transact(opts, "cancelWithdrawRequest", txid_, requester_)
}

// CancelWithdrawRequest is a paid mutator transaction binding the contract method 0xf9b2d23b.
//
// Solidity: function cancelWithdrawRequest(string txid_, string requester_) returns(bool)
func (_Sol *SolSession) CancelWithdrawRequest(txid_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.Contract.CancelWithdrawRequest(&_Sol.TransactOpts, txid_, requester_)
}

// CancelWithdrawRequest is a paid mutator transaction binding the contract method 0xf9b2d23b.
//
// Solidity: function cancelWithdrawRequest(string txid_, string requester_) returns(bool)
func (_Sol *SolTransactorSession) CancelWithdrawRequest(txid_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.Contract.CancelWithdrawRequest(&_Sol.TransactOpts, txid_, requester_)
}

// ConfirmPaymentRequest is a paid mutator transaction binding the contract method 0x8e499d11.
//
// Solidity: function confirmPaymentRequest(string txid_, string requester_) returns(bool)
func (_Sol *SolTransactor) ConfirmPaymentRequest(opts *bind.TransactOpts, txid_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.contract.Transact(opts, "confirmPaymentRequest", txid_, requester_)
}

// ConfirmPaymentRequest is a paid mutator transaction binding the contract method 0x8e499d11.
//
// Solidity: function confirmPaymentRequest(string txid_, string requester_) returns(bool)
func (_Sol *SolSession) ConfirmPaymentRequest(txid_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.Contract.ConfirmPaymentRequest(&_Sol.TransactOpts, txid_, requester_)
}

// ConfirmPaymentRequest is a paid mutator transaction binding the contract method 0x8e499d11.
//
// Solidity: function confirmPaymentRequest(string txid_, string requester_) returns(bool)
func (_Sol *SolTransactorSession) ConfirmPaymentRequest(txid_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.Contract.ConfirmPaymentRequest(&_Sol.TransactOpts, txid_, requester_)
}

// ConfirmWithdrawRequest is a paid mutator transaction binding the contract method 0xa2a01c54.
//
// Solidity: function confirmWithdrawRequest(string txid_, string requester_) returns(bool)
func (_Sol *SolTransactor) ConfirmWithdrawRequest(opts *bind.TransactOpts, txid_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.contract.Transact(opts, "confirmWithdrawRequest", txid_, requester_)
}

// ConfirmWithdrawRequest is a paid mutator transaction binding the contract method 0xa2a01c54.
//
// Solidity: function confirmWithdrawRequest(string txid_, string requester_) returns(bool)
func (_Sol *SolSession) ConfirmWithdrawRequest(txid_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.Contract.ConfirmWithdrawRequest(&_Sol.TransactOpts, txid_, requester_)
}

// ConfirmWithdrawRequest is a paid mutator transaction binding the contract method 0xa2a01c54.
//
// Solidity: function confirmWithdrawRequest(string txid_, string requester_) returns(bool)
func (_Sol *SolTransactorSession) ConfirmWithdrawRequest(txid_ string, requester_ string) (*types.Transaction, error) {
	return _Sol.Contract.ConfirmWithdrawRequest(&_Sol.TransactOpts, txid_, requester_)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Sol *SolTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sol.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Sol *SolSession) RenounceOwnership() (*types.Transaction, error) {
	return _Sol.Contract.RenounceOwnership(&_Sol.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Sol *SolTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Sol.Contract.RenounceOwnership(&_Sol.TransactOpts)
}

// ResetPaymentVaults is a paid mutator transaction binding the contract method 0xdcfa9856.
//
// Solidity: function resetPaymentVaults(string[] vaultAddresses_) returns()
func (_Sol *SolTransactor) ResetPaymentVaults(opts *bind.TransactOpts, vaultAddresses_ []string) (*types.Transaction, error) {
	return _Sol.contract.Transact(opts, "resetPaymentVaults", vaultAddresses_)
}

// ResetPaymentVaults is a paid mutator transaction binding the contract method 0xdcfa9856.
//
// Solidity: function resetPaymentVaults(string[] vaultAddresses_) returns()
func (_Sol *SolSession) ResetPaymentVaults(vaultAddresses_ []string) (*types.Transaction, error) {
	return _Sol.Contract.ResetPaymentVaults(&_Sol.TransactOpts, vaultAddresses_)
}

// ResetPaymentVaults is a paid mutator transaction binding the contract method 0xdcfa9856.
//
// Solidity: function resetPaymentVaults(string[] vaultAddresses_) returns()
func (_Sol *SolTransactorSession) ResetPaymentVaults(vaultAddresses_ []string) (*types.Transaction, error) {
	return _Sol.Contract.ResetPaymentVaults(&_Sol.TransactOpts, vaultAddresses_)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Sol *SolTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Sol.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Sol *SolSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Sol.Contract.TransferOwnership(&_Sol.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Sol *SolTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Sol.Contract.TransferOwnership(&_Sol.TransactOpts, newOwner)
}

// SolOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Sol contract.
type SolOwnershipTransferredIterator struct {
	Event *SolOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SolOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SolOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SolOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SolOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SolOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SolOwnershipTransferred represents a OwnershipTransferred event raised by the Sol contract.
type SolOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Sol *SolFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SolOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Sol.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SolOwnershipTransferredIterator{contract: _Sol.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Sol *SolFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SolOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Sol.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SolOwnershipTransferred)
				if err := _Sol.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Sol *SolFilterer) ParseOwnershipTransferred(log types.Log) (*SolOwnershipTransferred, error) {
	event := new(SolOwnershipTransferred)
	if err := _Sol.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SolPaymentConfirmedIterator is returned from FilterPaymentConfirmed and is used to iterate over the raw logs and unpacked data for PaymentConfirmed events raised by the Sol contract.
type SolPaymentConfirmedIterator struct {
	Event *SolPaymentConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SolPaymentConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SolPaymentConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SolPaymentConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SolPaymentConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SolPaymentConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SolPaymentConfirmed represents a PaymentConfirmed event raised by the Sol contract.
type SolPaymentConfirmed struct {
	Nonce       *big.Int
	Requester   common.Hash
	Token       common.Hash
	Amount      *big.Int
	Txid        string
	Vault       string
	Timestamp   *big.Int
	RequestHash [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterPaymentConfirmed is a free log retrieval operation binding the contract event 0xc66d2b47e34dec48512326508e5282dca30c5b0e0752ea2b0c95f6337d065dcc.
//
// Solidity: event PaymentConfirmed(uint256 indexed nonce, string indexed requester, string indexed token, uint256 amount, string txid, string vault, uint256 timestamp, bytes32 requestHash)
func (_Sol *SolFilterer) FilterPaymentConfirmed(opts *bind.FilterOpts, nonce []*big.Int, requester []string, token []string) (*SolPaymentConfirmedIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Sol.contract.FilterLogs(opts, "PaymentConfirmed", nonceRule, requesterRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &SolPaymentConfirmedIterator{contract: _Sol.contract, event: "PaymentConfirmed", logs: logs, sub: sub}, nil
}

// WatchPaymentConfirmed is a free log subscription operation binding the contract event 0xc66d2b47e34dec48512326508e5282dca30c5b0e0752ea2b0c95f6337d065dcc.
//
// Solidity: event PaymentConfirmed(uint256 indexed nonce, string indexed requester, string indexed token, uint256 amount, string txid, string vault, uint256 timestamp, bytes32 requestHash)
func (_Sol *SolFilterer) WatchPaymentConfirmed(opts *bind.WatchOpts, sink chan<- *SolPaymentConfirmed, nonce []*big.Int, requester []string, token []string) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Sol.contract.WatchLogs(opts, "PaymentConfirmed", nonceRule, requesterRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SolPaymentConfirmed)
				if err := _Sol.contract.UnpackLog(event, "PaymentConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaymentConfirmed is a log parse operation binding the contract event 0xc66d2b47e34dec48512326508e5282dca30c5b0e0752ea2b0c95f6337d065dcc.
//
// Solidity: event PaymentConfirmed(uint256 indexed nonce, string indexed requester, string indexed token, uint256 amount, string txid, string vault, uint256 timestamp, bytes32 requestHash)
func (_Sol *SolFilterer) ParsePaymentConfirmed(log types.Log) (*SolPaymentConfirmed, error) {
	event := new(SolPaymentConfirmed)
	if err := _Sol.contract.UnpackLog(event, "PaymentConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SolPaymentRequestAddIterator is returned from FilterPaymentRequestAdd and is used to iterate over the raw logs and unpacked data for PaymentRequestAdd events raised by the Sol contract.
type SolPaymentRequestAddIterator struct {
	Event *SolPaymentRequestAdd // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SolPaymentRequestAddIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SolPaymentRequestAdd)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SolPaymentRequestAdd)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SolPaymentRequestAddIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SolPaymentRequestAddIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SolPaymentRequestAdd represents a PaymentRequestAdd event raised by the Sol contract.
type SolPaymentRequestAdd struct {
	Nonce       *big.Int
	Requester   common.Hash
	Token       common.Hash
	Amount      *big.Int
	Txid        string
	Vault       string
	Timestamp   *big.Int
	RequestHash [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterPaymentRequestAdd is a free log retrieval operation binding the contract event 0xd42b47b4f0b1df1765d3b6e4013946c28e8514a24f035cadca52a6030efb0c3e.
//
// Solidity: event PaymentRequestAdd(uint256 indexed nonce, string indexed requester, string indexed token, uint256 amount, string txid, string vault, uint256 timestamp, bytes32 requestHash)
func (_Sol *SolFilterer) FilterPaymentRequestAdd(opts *bind.FilterOpts, nonce []*big.Int, requester []string, token []string) (*SolPaymentRequestAddIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Sol.contract.FilterLogs(opts, "PaymentRequestAdd", nonceRule, requesterRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &SolPaymentRequestAddIterator{contract: _Sol.contract, event: "PaymentRequestAdd", logs: logs, sub: sub}, nil
}

// WatchPaymentRequestAdd is a free log subscription operation binding the contract event 0xd42b47b4f0b1df1765d3b6e4013946c28e8514a24f035cadca52a6030efb0c3e.
//
// Solidity: event PaymentRequestAdd(uint256 indexed nonce, string indexed requester, string indexed token, uint256 amount, string txid, string vault, uint256 timestamp, bytes32 requestHash)
func (_Sol *SolFilterer) WatchPaymentRequestAdd(opts *bind.WatchOpts, sink chan<- *SolPaymentRequestAdd, nonce []*big.Int, requester []string, token []string) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Sol.contract.WatchLogs(opts, "PaymentRequestAdd", nonceRule, requesterRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SolPaymentRequestAdd)
				if err := _Sol.contract.UnpackLog(event, "PaymentRequestAdd", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaymentRequestAdd is a log parse operation binding the contract event 0xd42b47b4f0b1df1765d3b6e4013946c28e8514a24f035cadca52a6030efb0c3e.
//
// Solidity: event PaymentRequestAdd(uint256 indexed nonce, string indexed requester, string indexed token, uint256 amount, string txid, string vault, uint256 timestamp, bytes32 requestHash)
func (_Sol *SolFilterer) ParsePaymentRequestAdd(log types.Log) (*SolPaymentRequestAdd, error) {
	event := new(SolPaymentRequestAdd)
	if err := _Sol.contract.UnpackLog(event, "PaymentRequestAdd", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SolPaymentRequestCancelIterator is returned from FilterPaymentRequestCancel and is used to iterate over the raw logs and unpacked data for PaymentRequestCancel events raised by the Sol contract.
type SolPaymentRequestCancelIterator struct {
	Event *SolPaymentRequestCancel // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SolPaymentRequestCancelIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SolPaymentRequestCancel)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SolPaymentRequestCancel)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SolPaymentRequestCancelIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SolPaymentRequestCancelIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SolPaymentRequestCancel represents a PaymentRequestCancel event raised by the Sol contract.
type SolPaymentRequestCancel struct {
	Nonce       *big.Int
	Txid        common.Hash
	Requester   common.Hash
	RequestHash [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterPaymentRequestCancel is a free log retrieval operation binding the contract event 0x4862ed9e80dec9ae3576a4b8f768c792cdddba80ce18922d64bf12ee14749cd5.
//
// Solidity: event PaymentRequestCancel(uint256 indexed nonce, string indexed txid, string indexed requester, bytes32 requestHash)
func (_Sol *SolFilterer) FilterPaymentRequestCancel(opts *bind.FilterOpts, nonce []*big.Int, txid []string, requester []string) (*SolPaymentRequestCancelIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var txidRule []interface{}
	for _, txidItem := range txid {
		txidRule = append(txidRule, txidItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _Sol.contract.FilterLogs(opts, "PaymentRequestCancel", nonceRule, txidRule, requesterRule)
	if err != nil {
		return nil, err
	}
	return &SolPaymentRequestCancelIterator{contract: _Sol.contract, event: "PaymentRequestCancel", logs: logs, sub: sub}, nil
}

// WatchPaymentRequestCancel is a free log subscription operation binding the contract event 0x4862ed9e80dec9ae3576a4b8f768c792cdddba80ce18922d64bf12ee14749cd5.
//
// Solidity: event PaymentRequestCancel(uint256 indexed nonce, string indexed txid, string indexed requester, bytes32 requestHash)
func (_Sol *SolFilterer) WatchPaymentRequestCancel(opts *bind.WatchOpts, sink chan<- *SolPaymentRequestCancel, nonce []*big.Int, txid []string, requester []string) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var txidRule []interface{}
	for _, txidItem := range txid {
		txidRule = append(txidRule, txidItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _Sol.contract.WatchLogs(opts, "PaymentRequestCancel", nonceRule, txidRule, requesterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SolPaymentRequestCancel)
				if err := _Sol.contract.UnpackLog(event, "PaymentRequestCancel", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaymentRequestCancel is a log parse operation binding the contract event 0x4862ed9e80dec9ae3576a4b8f768c792cdddba80ce18922d64bf12ee14749cd5.
//
// Solidity: event PaymentRequestCancel(uint256 indexed nonce, string indexed txid, string indexed requester, bytes32 requestHash)
func (_Sol *SolFilterer) ParsePaymentRequestCancel(log types.Log) (*SolPaymentRequestCancel, error) {
	event := new(SolPaymentRequestCancel)
	if err := _Sol.contract.UnpackLog(event, "PaymentRequestCancel", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SolWithdrawConfirmedIterator is returned from FilterWithdrawConfirmed and is used to iterate over the raw logs and unpacked data for WithdrawConfirmed events raised by the Sol contract.
type SolWithdrawConfirmedIterator struct {
	Event *SolWithdrawConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SolWithdrawConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SolWithdrawConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SolWithdrawConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SolWithdrawConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SolWithdrawConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SolWithdrawConfirmed represents a WithdrawConfirmed event raised by the Sol contract.
type SolWithdrawConfirmed struct {
	Nonce       *big.Int
	Requester   common.Hash
	Token       common.Hash
	Amount      *big.Int
	Txid        string
	Vault       string
	Timestamp   *big.Int
	RequestHash [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWithdrawConfirmed is a free log retrieval operation binding the contract event 0x3b2bfd7dcbbcafce8dca8c444936a1af0bf88ea328e1fe76f885f4e365065259.
//
// Solidity: event WithdrawConfirmed(uint256 indexed nonce, string indexed requester, string indexed token, uint256 amount, string txid, string vault, uint256 timestamp, bytes32 requestHash)
func (_Sol *SolFilterer) FilterWithdrawConfirmed(opts *bind.FilterOpts, nonce []*big.Int, requester []string, token []string) (*SolWithdrawConfirmedIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Sol.contract.FilterLogs(opts, "WithdrawConfirmed", nonceRule, requesterRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &SolWithdrawConfirmedIterator{contract: _Sol.contract, event: "WithdrawConfirmed", logs: logs, sub: sub}, nil
}

// WatchWithdrawConfirmed is a free log subscription operation binding the contract event 0x3b2bfd7dcbbcafce8dca8c444936a1af0bf88ea328e1fe76f885f4e365065259.
//
// Solidity: event WithdrawConfirmed(uint256 indexed nonce, string indexed requester, string indexed token, uint256 amount, string txid, string vault, uint256 timestamp, bytes32 requestHash)
func (_Sol *SolFilterer) WatchWithdrawConfirmed(opts *bind.WatchOpts, sink chan<- *SolWithdrawConfirmed, nonce []*big.Int, requester []string, token []string) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Sol.contract.WatchLogs(opts, "WithdrawConfirmed", nonceRule, requesterRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SolWithdrawConfirmed)
				if err := _Sol.contract.UnpackLog(event, "WithdrawConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawConfirmed is a log parse operation binding the contract event 0x3b2bfd7dcbbcafce8dca8c444936a1af0bf88ea328e1fe76f885f4e365065259.
//
// Solidity: event WithdrawConfirmed(uint256 indexed nonce, string indexed requester, string indexed token, uint256 amount, string txid, string vault, uint256 timestamp, bytes32 requestHash)
func (_Sol *SolFilterer) ParseWithdrawConfirmed(log types.Log) (*SolWithdrawConfirmed, error) {
	event := new(SolWithdrawConfirmed)
	if err := _Sol.contract.UnpackLog(event, "WithdrawConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SolWithdrawRequestAddIterator is returned from FilterWithdrawRequestAdd and is used to iterate over the raw logs and unpacked data for WithdrawRequestAdd events raised by the Sol contract.
type SolWithdrawRequestAddIterator struct {
	Event *SolWithdrawRequestAdd // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SolWithdrawRequestAddIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SolWithdrawRequestAdd)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SolWithdrawRequestAdd)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SolWithdrawRequestAddIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SolWithdrawRequestAddIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SolWithdrawRequestAdd represents a WithdrawRequestAdd event raised by the Sol contract.
type SolWithdrawRequestAdd struct {
	Nonce       *big.Int
	Requester   common.Hash
	Token       common.Hash
	Amount      *big.Int
	Txid        string
	Vault       string
	Timestamp   *big.Int
	RequestHash [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWithdrawRequestAdd is a free log retrieval operation binding the contract event 0x2b18c2030915c33606a41d91b4f4800897bf315692e7de957812993cd8388c7c.
//
// Solidity: event WithdrawRequestAdd(uint256 indexed nonce, string indexed requester, string indexed token, uint256 amount, string txid, string vault, uint256 timestamp, bytes32 requestHash)
func (_Sol *SolFilterer) FilterWithdrawRequestAdd(opts *bind.FilterOpts, nonce []*big.Int, requester []string, token []string) (*SolWithdrawRequestAddIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Sol.contract.FilterLogs(opts, "WithdrawRequestAdd", nonceRule, requesterRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &SolWithdrawRequestAddIterator{contract: _Sol.contract, event: "WithdrawRequestAdd", logs: logs, sub: sub}, nil
}

// WatchWithdrawRequestAdd is a free log subscription operation binding the contract event 0x2b18c2030915c33606a41d91b4f4800897bf315692e7de957812993cd8388c7c.
//
// Solidity: event WithdrawRequestAdd(uint256 indexed nonce, string indexed requester, string indexed token, uint256 amount, string txid, string vault, uint256 timestamp, bytes32 requestHash)
func (_Sol *SolFilterer) WatchWithdrawRequestAdd(opts *bind.WatchOpts, sink chan<- *SolWithdrawRequestAdd, nonce []*big.Int, requester []string, token []string) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Sol.contract.WatchLogs(opts, "WithdrawRequestAdd", nonceRule, requesterRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SolWithdrawRequestAdd)
				if err := _Sol.contract.UnpackLog(event, "WithdrawRequestAdd", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawRequestAdd is a log parse operation binding the contract event 0x2b18c2030915c33606a41d91b4f4800897bf315692e7de957812993cd8388c7c.
//
// Solidity: event WithdrawRequestAdd(uint256 indexed nonce, string indexed requester, string indexed token, uint256 amount, string txid, string vault, uint256 timestamp, bytes32 requestHash)
func (_Sol *SolFilterer) ParseWithdrawRequestAdd(log types.Log) (*SolWithdrawRequestAdd, error) {
	event := new(SolWithdrawRequestAdd)
	if err := _Sol.contract.UnpackLog(event, "WithdrawRequestAdd", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SolWithdrawRequestCancelIterator is returned from FilterWithdrawRequestCancel and is used to iterate over the raw logs and unpacked data for WithdrawRequestCancel events raised by the Sol contract.
type SolWithdrawRequestCancelIterator struct {
	Event *SolWithdrawRequestCancel // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SolWithdrawRequestCancelIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SolWithdrawRequestCancel)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SolWithdrawRequestCancel)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SolWithdrawRequestCancelIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SolWithdrawRequestCancelIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SolWithdrawRequestCancel represents a WithdrawRequestCancel event raised by the Sol contract.
type SolWithdrawRequestCancel struct {
	Nonce       *big.Int
	Txid        common.Hash
	Requester   common.Hash
	RequestHash [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWithdrawRequestCancel is a free log retrieval operation binding the contract event 0xa5069d6cb764b46a7dc5656f619424003577f48dca70b9f19c3a9b91b303c233.
//
// Solidity: event WithdrawRequestCancel(uint256 indexed nonce, string indexed txid, string indexed requester, bytes32 requestHash)
func (_Sol *SolFilterer) FilterWithdrawRequestCancel(opts *bind.FilterOpts, nonce []*big.Int, txid []string, requester []string) (*SolWithdrawRequestCancelIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var txidRule []interface{}
	for _, txidItem := range txid {
		txidRule = append(txidRule, txidItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _Sol.contract.FilterLogs(opts, "WithdrawRequestCancel", nonceRule, txidRule, requesterRule)
	if err != nil {
		return nil, err
	}
	return &SolWithdrawRequestCancelIterator{contract: _Sol.contract, event: "WithdrawRequestCancel", logs: logs, sub: sub}, nil
}

// WatchWithdrawRequestCancel is a free log subscription operation binding the contract event 0xa5069d6cb764b46a7dc5656f619424003577f48dca70b9f19c3a9b91b303c233.
//
// Solidity: event WithdrawRequestCancel(uint256 indexed nonce, string indexed txid, string indexed requester, bytes32 requestHash)
func (_Sol *SolFilterer) WatchWithdrawRequestCancel(opts *bind.WatchOpts, sink chan<- *SolWithdrawRequestCancel, nonce []*big.Int, txid []string, requester []string) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var txidRule []interface{}
	for _, txidItem := range txid {
		txidRule = append(txidRule, txidItem)
	}
	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _Sol.contract.WatchLogs(opts, "WithdrawRequestCancel", nonceRule, txidRule, requesterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SolWithdrawRequestCancel)
				if err := _Sol.contract.UnpackLog(event, "WithdrawRequestCancel", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawRequestCancel is a log parse operation binding the contract event 0xa5069d6cb764b46a7dc5656f619424003577f48dca70b9f19c3a9b91b303c233.
//
// Solidity: event WithdrawRequestCancel(uint256 indexed nonce, string indexed txid, string indexed requester, bytes32 requestHash)
func (_Sol *SolFilterer) ParseWithdrawRequestCancel(log types.Log) (*SolWithdrawRequestCancel, error) {
	event := new(SolWithdrawRequestCancel)
	if err := _Sol.contract.UnpackLog(event, "WithdrawRequestCancel", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
